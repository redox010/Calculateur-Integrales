import streamlit as st
import numpy as np
import sympy as sp
import matplotlib.pyplot as plt
from scipy import integrate
from scipy.integrate import nquad
from scipy.integrate import dblquad, tplquad, quad, trapezoid, simpson
import time
import math

# Configuration de la page
st.set_page_config(
    page_title="Analyse Num√©rique Int√©grale",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialisation de l'√©tat de session
if 'current_page' not in st.session_state:
    st.session_state.current_page = 'accueil'

# Fonctions de navigation
def navigate_to(page_name):
    st.session_state.current_page = page_name

# Sidebar - Navigation
with st.sidebar:
    st.title("Menu :")
    st.button("üè† Accueil", on_click=navigate_to, args=('accueil',))
    st.button("‚ûï Int√©gration Num√©rique", on_click=navigate_to, args=('methodes_numeriques',))
    st.button("‚ûï Comparaison des M√©thodes", on_click=navigate_to, args=('comparaison',))
    st.button("‚ûï Int√©grales Multiples", on_click=navigate_to, args=('integrales_multiples',))
    st.button("‚ûï Int√©gral Impropre", on_click=navigate_to, args=('int_impropre',))
    st.button("‚ûï Int√©gration de Monte Carlo", on_click=navigate_to, args=('monte_carlo',))
    st.button("‚ûï Int√©gration Adaptative", on_click=navigate_to, args=('adapt',))
    st.button("üìò Guide d'utilisation", on_click=navigate_to, args=('exemples',))
    
    st.markdown("---")
    st.write("**Equipe :**")
    st.write("- BENMOUAKDEM Reda")
    st.write("- BAKHTIOUI Imad")
    st.write("- HARAMBE YAO Alpha")
    st.write("**Version:** 1.0")

# Page Accueil
if st.session_state.current_page == 'accueil':
    st.title("Analyse Num√©rique des Int√©grales")
    st.markdown("""
    ## Bienvenue dans l'application compl√®te d'analyse num√©rique des int√©grales
    
    Cette application permet de :
    - Calculer des int√©grales avec diff√©rentes m√©thodes num√©riques
    - √âvaluer des int√©grales multiples et impropres
    - Utiliser la m√©thode Monte Carlo
    - Comparer les diff√©rentes approches
    
    ### Fonctionnalit√©s principales :
    """)
    
    cols = st.columns(5)
    with cols[0]:
        st.markdown("""
        **üßÆ M√©thodes Num√©riques**
        - Rectangles (gauche, droite, milieu)
        - Trap√®zes
        - Simpson (1/3 et 3/8)
        - Gauss-Legendre
        """)
    
    with cols[1]:
        st.markdown("""
        **üìê Int√©grales Multiples**
        - Int√©grales doubles
        - Int√©grales triples
        - Changement de variables
        """)
    
    with cols[2]:
        st.markdown("""
        **üé≤ Monte Carlo**
        - Int√©gration Monte Carlo
        - Simulation stochastique
        - Analyse de convergence
        """)
    
    with cols[3]:
        st.markdown("""
        **üñáÔ∏è Int√©gral Impropre**
        - Int√©gration en bornes infini 
        """)
    with cols[4]:
        st.markdown("""
        **üîó Int√©gral Adaptative**
        - Int√©gration avec quadrature de Simpson 
        """)
    

# Page M√©thodes Num√©riques
elif st.session_state.current_page == 'methodes_numeriques':
    st.title("Int√©gration Num√©rique")
    st.subheader("Expression de la fonction")
    fonction = st.text_input("Entrez la fonction f(x) √† int√©grer", "exp(-x**2)")

    # Section pour les bornes
    st.subheader("Bornes d'int√©gration")
    col1, col2 = st.columns(2)
    with col1:
        a_input = st.text_input("Borne inf√©rieure a", "-inf")
    with col2:
        b_input = st.text_input("Borne sup√©rieure b", "inf")

    # Conversion de la fonction
    x = sp.symbols('x')
    try:
        f_expr = sp.sympify(fonction)
        f_lambda = sp.lambdify(x, f_expr, modules=['numpy', 'math'])
    except Exception as e:
        st.error(f"Erreur dans la fonction : {str(e)}")
        st.stop()

    # Fonction pour convertir les bornes
    def parse_bound(bound_str):
        bound_str = bound_str.strip().lower()
        if bound_str in ['inf', 'infini', 'infinity', '+inf', '+infini', '+infinity']:
            return sp.oo
        elif bound_str in ['-inf', '-infini', '-infinity']:
            return -sp.oo
        else:
            try:
                return sp.sympify(bound_str)
            except:
                raise ValueError(f"Impossible d'interpr√©ter la borne: {bound_str}")

    try:
        a_val = parse_bound(a_input)
        b_val = parse_bound(b_input)
    except Exception as e:
        st.error(f"Erreur dans les bornes : {str(e)}")
        st.stop()

   # st.markdown("<br><br>", unsafe_allow_html=True)  # saut de ligne
    
    st.latex(r"\int_{" + sp.latex(a_val) + "}^{" + sp.latex(b_val) + "} " + sp.latex(f_expr) + " \, dx ")

    st.subheader("Type d'int√©gration: Symbolique/Num√©rique")
    # S√©lection du type de calcul
    calculation_type = st.radio(
        "S√©lectionnez le type de calcul:",
        ["Exacte (Symbolique)", "Num√©rique"],
        index=0
    )


    # Fonction pour convertir les bornes
    def parse_bound(bound_str):
        bound_str = bound_str.strip().lower()
        if bound_str in ['inf', 'infini', 'infinity', '+inf', '+infini', '+infinity']:
            return sp.oo
        elif bound_str in ['-inf', '-infini', '-infinity']:
            return -sp.oo
        else:
            try:
                return sp.sympify(bound_str)
            except:
                raise ValueError(f"Impossible d'interpr√©ter la borne: {bound_str}")

    try:
        a_val = parse_bound(a_input)
        b_val = parse_bound(b_input)
    except Exception as e:
        st.error(f"Erreur dans les bornes : {str(e)}")
        st.stop()

    # Calcul Exact Symbolique
    if calculation_type == "Exacte (Symbolique)":
        try:
            integral = sp.integrate(f_expr, (x, a_val, b_val))
            
            st.subheader("R√©sultat")
            st.write("Fonction √† int√©grer:")
            # Version qui prot√®ge contre les expressions vides
            func_latex = sp.latex(f_expr) if f_expr else ""
            st.latex(rf"f(x) = {func_latex}")


            st.write("Calcul de l'int√©grale:")
            st.latex(r"\int_{" + sp.latex(a_val) + "}^{" + sp.latex(b_val) + "} " + 
                sp.latex(f_expr) + " \, dx = " + sp.latex(integral))
            
            st.success(f"R√©sultat exact: {sp.pretty(integral)}")
            
            # Visualisation pour les bornes finies
            try:
                a_plot = float(a_val.evalf()) if a_val.is_finite else -10
                b_plot = float(b_val.evalf()) if b_val.is_finite else 10
                x_vals = np.linspace(a_plot, b_plot, 1000)
                y_vals = [f_lambda(x) for x in x_vals]
                
                # Calcul des valeurs de la primitive
                primitive = sp.integrate(f_expr, x)
                F_lambda = sp.lambdify(x, primitive, modules=['numpy', 'math'])
                F_vals = [F_lambda(x) for x in x_vals]
                
                # Cr√©ation des graphiques
                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
                
                # Graphique de la fonction originale
                ax1.plot(x_vals, y_vals, label=f"f(x) = {fonction}", color='blue')
                if a_val.is_finite and b_val.is_finite:
                    ax1.fill_between(x_vals, y_vals, alpha=0.2, color='blue')
                ax1.set_xlabel('x')
                ax1.set_ylabel('f(x)')
                ax1.set_title("Fonction originale")
                ax1.legend()
                ax1.grid()
                
                # Graphique de la primitive
                ax2.plot(x_vals, F_vals, label=f"F(x) = {sp.latex(primitive)}", color='red')
                ax2.set_xlabel('x')
                ax2.set_ylabel('F(x)')
                ax2.set_title("Primitive (fonction int√©grale)")
                ax2.legend()
                ax2.grid()
                
                plt.tight_layout()
                st.pyplot(fig)
                
            except Exception as e:
                st.warning(f"Visualisation limit√©e pour cette fonction. Erreur : {str(e)}")
                
        except Exception as e:
            st.error(f"Erreur dans le calcul symbolique : {str(e)}")

    # Calcul Num√©rique
    elif calculation_type == "Num√©rique":
        has_infinite_bounds = not (a_val.is_finite and b_val.is_finite)
    
        if has_infinite_bounds:
            st.info("Les bornes infinies d√©tect√©es - Utilisation automatique de la quadrature adaptative")
            decimales = st.slider("Nombre de d√©cimales √† afficher :", 2, 50, 6)
            if st.button("Calculer avec Quadrature Adaptative"):
                
                try:
                    start_time = time.time()
                    # Conversion des bornes pour scipy.quad
                    a_quad = -np.inf if a_val == -sp.oo else float(a_val)
                    b_quad = np.inf if b_val == sp.oo else float(b_val)
                    
                    result, error = integrate.quad(f_lambda, a_quad, b_quad)
                    computation_time = time.time() - start_time

                    st.success("Calcul termin√© !")
                    if decimales <= 10:
                        cols = st.columns(3)
                        cols[0].metric("R√©sultat", f"{result:.{decimales}f}")
                        cols[1].metric("Erreur estim√©e", f"{error:.{decimales}f}")
                        cols[2].metric("Temps (s)", f"{computation_time:.4f}")
                    else:
                        st.write("**R√©sultat:**")
                        st.code(f"{result:.{decimales}f}")
                        st.write("**Erreur estim√©e:**")
                        st.code(f"{error:.{decimales}f}")
                        st.write("**Temps (s):**")
                        st.code(f"{computation_time:.10f}")  # On garde 10 d√©cimales max pour le temps
                    
                    # Visualisation avec plage raisonnable
                    x_min = -10 if a_val == -sp.oo else float(a_val)
                    x_max = 10 if b_val == sp.oo else float(b_val)
                    x_vals = np.linspace(x_min, x_max, 1000)
                    y_vals = f_lambda(x_vals)
                    
                    fig, ax = plt.subplots(figsize=(10, 5))
                    ax.plot(x_vals, y_vals, label=f"f(x) = {fonction}")
                    ax.set_xlabel("x")
                    ax.set_ylabel("f(x)")
                    ax.legend()
                    ax.grid()
                    st.pyplot(fig)
                    
                except Exception as e:
                    st.error(f"Erreur dans le calcul : {str(e)}")
        else:
            st.subheader("Param√®tres num√©riques")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                methode = st.selectbox("M√©thode num√©rique:", [
                "Rectangle gauche",
                "Rectangle droit",
                "Rectangle milieu",
                "Trap√®zes",
                "Simpson 1/3",
                "Simpson 3/8",
                "Gauss-Legendre"
            ])
            with col2:
                n = st.slider("Nombre de subdivisions:", 10, 1000, 100)
            with col3:
                decimales = st.slider("Pr√©cision (d√©cimales)", 2, 50, 6)
            # S√©lection de la m√©thode
            
            
            # Nombre de subdivisions
            
            
            
            if st.button("Calculer num√©riquement"):
                try:
                    start_time = time.time()
                
                    a_float = float(a_val)
                    b_float = float(b_val)
                    
                    # Impl√©mentation des m√©thodes avec calcul d'erreur
                    def rectangle_gauche(f, a, b, n):
                        h = (b - a)/n
                        integral = h * sum(f(a + i*h) for i in range(n))
                        # Estimation d'erreur: diff√©rence avec rectangle droit
                        integral_right = h * sum(f(a + i*h) for i in range(1, n+1))
                        error = abs(integral - integral_right)
                        return integral, error
                    
                    def rectangle_droit(f, a, b, n):
                        h = (b - a)/n
                        integral = h * sum(f(a + i*h) for i in range(1, n+1))
                        # Estimation d'erreur: diff√©rence avec rectangle gauche
                        integral_left = h * sum(f(a + i*h) for i in range(n))
                        error = abs(integral - integral_left)
                        return integral, error
                    
                    def rectangle_milieu(f, a, b, n):
                        h = (b - a)/n
                        integral = h * sum(f(a + (i+0.5)*h) for i in range(n))
                        # Estimation d'erreur: diff√©rence avec trap√®zes
                        integral_trap = (h/2) * (f(a) + f(b) + 2*sum(f(a + i*h) for i in range(1, n)))
                        error = abs(integral - integral_trap)
                        return integral, error
                    
                    def trapezes(f, a, b, n):
                        h = (b - a)/n
                        integral = h/2 * (f(a) + f(b) + 2*sum(f(a + i*h) for i in range(1, n)))
                        # Estimation d'erreur: diff√©rence avec Simpson
                        if n >= 2:
                            integral_simp = (h/3) * (f(a) + f(b) + 4*sum(f(a + i*h) for i in range(1, n, 2)) + 2*sum(f(a + i*h) for i in range(2, n-1, 2)))
                            error = abs(integral - integral_simp)
                        else:
                            error = float('nan')
                        return integral, error
                    
                    def simpson_13(f, a, b, n):
                        if n % 2 != 0:
                            n += 1
                        h = (b - a)/n
                        integral = h/3 * (f(a) + f(b) + 4*sum(f(a + i*h) for i in range(1, n, 2)) + 2*sum(f(a + i*h) for i in range(2, n-1, 2)))
                        # Estimation d'erreur: diff√©rence avec n/2 points
                        if n >= 4:
                            integral_half = simpson_13(f, a, b, n//2)[0]
                            error = abs(integral - integral_half)/15
                        else:
                            error = float('nan')
                        return integral, error
                    
                    def simpson_38(f, a, b, n):
                        if n % 3 != 0:
                            n += (3 - n % 3)
                        h = (b - a)/n
                        integral = 3*h/8 * (f(a) + f(b) + 3*sum(f(a + i*h) + f(a + (i+1)*h) for i in range(1, n, 3)) + 2*sum(f(a + i*h) for i in range(3, n-2, 3)))
                        # Estimation d'erreur: diff√©rence avec n/3 points
                        if n >= 6:
                            integral_third = simpson_38(f, a, b, n//3)[0]
                            error = abs(integral - integral_third)
                        else:
                            error = float('nan')
                        return integral, error
                    
                    def gauss_legendre(f, a, b, n):
                        x, w = np.polynomial.legendre.leggauss(n)
                        t = 0.5*(b - a)*x + 0.5*(b + a)
                        integral = 0.5*(b - a) * np.sum(w * f(t))
                        # Estimation d'erreur: diff√©rence avec n-1 points
                        if n > 1:
                            x2, w2 = np.polynomial.legendre.leggauss(n-1)
                            t2 = 0.5*(b - a)*x2 + 0.5*(b + a)
                            integral2 = 0.5*(b - a) * np.sum(w2 * f(t2))
                            error = abs(integral - integral2)
                        else:
                            error = float('nan')
                        return integral, error
            
                    method_functions = {
                        "Rectangle gauche": rectangle_gauche,
                        "Rectangle droit": rectangle_droit,
                        "Rectangle milieu": rectangle_milieu,
                        "Trap√®zes": trapezes,
                        "Simpson 1/3": simpson_13,
                        "Simpson 3/8": simpson_38,
                        "Gauss-Legendre": gauss_legendre
                    }
                
                    result, error = method_functions[methode](f_lambda, a_float, b_float, n)
                    computation_time = time.time() - start_time
                    st.success("Calcul termin√© !")
                    if decimales <= 10:
                        cols = st.columns(3)
                        cols[0].metric("R√©sultat", f"{result:.{decimales}f}")
                        cols[1].metric("Erreur estim√©e", f"{error:.{decimales}f}")
                        cols[2].metric("Temps (s)", f"{computation_time:.4f}")
                    else:
                        st.write("**R√©sultat:**")
                        st.code(f"{result:.{decimales}f}")
                        st.write("**Erreur estim√©e:**")
                        st.code(f"{error:.{decimales}f}")
                        st.write("**Temps (s):**")
                        st.code(f"{computation_time:.10f}")  # On garde 10 d√©cimales max pour le temps
                    
                    # Visualisation
                    x_vals = np.linspace(a_float, b_float, 1000)
                    y_vals = f_lambda(x_vals)
                    
                    fig, ax = plt.subplots(figsize=(10, 5))
                    ax.plot(x_vals, y_vals, label=f"f(x) = {fonction}")
                    
                    # On ne remplit que si les bornes sont finies
                    if a_val.is_finite and b_val.is_finite:
                        # Visualisation sp√©cifique √† la m√©thode
                        if methode.startswith("Rectangle"):
                            h = (b_float - a_float)/n
                            if "gauche" in methode:
                                x_rect = np.linspace(a_float, b_float-h, n)
                            elif "droit" in methode:
                                x_rect = np.linspace(a_float+h, b_float, n)
                            else:  # milieu
                                x_rect = np.linspace(a_float+h/2, b_float-h/2, n)
                            y_rect = f_lambda(x_rect)
                            ax.bar(x_rect, y_rect, width=h, alpha=0.3, align='edge' if "droit" in methode else ('center' if "milieu" in methode else 'edge'), color='orange')
                        
                        elif methode == "Trap√®zes":
                            x_trap = np.linspace(a_float, b_float, n+1)
                            y_trap = f_lambda(x_trap)
                            for i in range(n):
                                ax.fill_between([x_trap[i], x_trap[i+1]], [y_trap[i], y_trap[i+1]], alpha=0.3, color='green')
                    
                    ax.set_xlabel("x")
                    ax.set_ylabel("f(x)")
                    ax.legend()
                    ax.grid()
                    st.pyplot(fig)
                    
                except Exception as e:
                    st.error(f"Erreur dans le calcul : {str(e)}")
    else:
        st.info("Veuillez s√©lectionner un type de calcul (Exacte ou Num√©rique)")

# Page Comparaison
elif st.session_state.current_page == 'comparaison':
    st.title("Comparaison des M√©thodes")
    st.header("Param√®tres d'Entr√©e")
    with st.expander("Param√®tres d'entr√©e", expanded=True):
        fonction = st.text_input("Fonction f(x)", "sin(x)")
        col1, col2, col3 = st.columns(3)
        with col1:
            a_input = st.text_input("Borne inf√©rieure a :", value="0")
            n = st.slider("Nombre de points n :", 2, 1000, 100)
            decimales = st.slider("Nombre de d√©cimales √† afficher :", 2, 20, 6)
        with col2:
            b_input = st.text_input("Borne sup√©rieure b :", value="pi")
            n_max = st.slider("Nombre max de points pour convergence:", 10, 5000, 1000) 
            exact_value = st.number_input("Valeur exacte (optionnelle) :", value=None)     
    
    # Bornes avec support des expressions math√©matiques
    
    
    
    # Conversion des bornes en valeurs num√©riques
    try:
        a_expr = sp.sympify(a_input)
        a = float(a_expr.evalf())
    except:
        st.error("Expression invalide pour la borne inf√©rieure a. Utilisez un nombre ou une expression comme '0', 'pi/2', etc.")
        st.stop()
    
    try:
        b_expr = sp.sympify(b_input)
        b = float(b_expr.evalf())
    except:
        st.error("Expression invalide pour la borne sup√©rieure b. Utilisez un nombre ou une expression comme 'pi', 'pi/2', etc.")
        st.stop()
    
    # V√©rification que a < b
    if a >= b:
        st.error("La borne inf√©rieure a doit √™tre strictement inf√©rieure √† la borne sup√©rieure b")
        st.stop()
    
    
    
    

    # Conversion de la fonction en expression sympy
    x = sp.symbols('x')
    try:
        f_expr = sp.sympify(fonction)
        f_lambda = sp.lambdify(x, f_expr, modules=['numpy', {'pi': math.pi}])
    except:
        st.error("Erreur dans la syntaxe de la fonction. Utilisez 'x' comme variable et les op√©rations standard.")
        st.stop()

    # Calcul de la valeur exacte si non fournie
    if exact_value is None:
        try:
            exact_value = float(sp.integrate(f_expr, (x, a, b)).evalf())
        except:
            st.warning("Impossible de calculer la valeur exacte symboliquement. Les erreurs seront relatives aux autres m√©thodes.")
            exact_value = None

    # Fonctions pour les diff√©rentes m√©thodes d'int√©gration
    def rectangle_gauche(f, a, b, n):
        h = (b - a) / n
        x = np.linspace(a, b, n, endpoint=False)
        return h * np.sum(f(x))

    def rectangle_droit(f, a, b, n):
        h = (b - a) / n
        x = np.linspace(a + h, b, n)
        return h * np.sum(f(x))

    def rectangle_milieu(f, a, b, n):
        h = (b - a) / n
        x = np.linspace(a + h/2, b - h/2, n)
        return h * np.sum(f(x))

    def trapeze(f, a, b, n):
        x = np.linspace(a, b, n)
        y = f(x)
        return (b - a) / (2 * (n - 1)) * (y[0] + y[-1] + 2 * np.sum(y[1:-1]))

    def simpson_13(f, a, b, n):
        if n % 2 != 0:
            n += 1  # Simpson n√©cessite un nombre pair d'intervalles
        h = (b - a) / n
        x = np.linspace(a, b, n+1)
        y = f(x)
        return h/3 * (y[0] + y[-1] + 4 * np.sum(y[1:-1:2]) + 2 * np.sum(y[2:-1:2]))

    def simpson_38(f, a, b, n):
        if n % 3 != 0:
            n = n + (3 - n % 3)  # Ajuster pour multiple de 3
        h = (b - a) / n
        x = np.linspace(a, b, n+1)
        y = f(x)
        return 3*h/8 * (y[0] + y[-1] + 3 * np.sum(y[1:-1:3] + y[2:-1:3]) + 2 * np.sum(y[3:-1:3]))

    def gauss_legendre(f, a, b, n):
        x, w = np.polynomial.legendre.leggauss(n)
        # Transformation de [-1,1] √† [a,b]
        t = 0.5 * (b - a) * x + 0.5 * (b + a)
        return 0.5 * (b - a) * np.sum(w * f(t))

    def monte_carlo(f, a, b, n):
        x_rand = np.random.uniform(a, b, n)
        return (b - a) * np.mean(f(x_rand))

    # Fonction pour calculer l'erreur
    def compute_error(approx, exact):
        if exact is not None and exact != 0:
            return abs((approx - exact) / exact) * 100
        elif exact is not None:
            return abs(approx - exact)
        else:
            return None

    # Fonction pour formater les nombres avec le bon nombre de d√©cimales
    def format_number(num, decimals):
        if num is None:
            return "N/A"
        if isinstance(num, str):
            return num
        return f"{num:.{decimals}f}"

    # Fonction pour √©tudier la convergence
    def study_convergence(method, f, a, b, n_max, exact):
        n_values = np.logspace(1, np.log10(n_max), 20).astype(int)
        errors = []
        for n in n_values:
            approx = method(f, a, b, n)
            err = compute_error(approx, exact)
            if err is not None:
                errors.append(err)
            else:
                errors.append(None)
        return n_values, errors

    # Bouton de calcul
    if st.button("Calculer l'Int√©grale"):
        st.subheader("R√©sultats")
        
        # Calcul des approximations
        methods = {
            "Rectangle gauche": rectangle_gauche,
            "Rectangle droit": rectangle_droit,
            "Rectangle milieu": rectangle_milieu,
            "Trap√®zes": trapeze,
            "Simpson 1/3": simpson_13,
            "Simpson 3/8": simpson_38,
            "Gauss-Legendre": gauss_legendre,
            "Monte Carlo": monte_carlo
        }
        
        results = []
        for name, method in methods.items():
            start_time = time.time()
            approx = method(f_lambda, a, b, n)
            computation_time = time.time() - start_time
            error = compute_error(approx, exact_value)
            
            # Formatage des nombres avec le bon nombre de d√©cimales
            approx_fmt = format_number(approx, decimales)
            error_fmt = format_number(error, decimales)
            time_fmt = format_number(computation_time, 6)  # On garde 6 d√©cimales pour le temps
            
            results.append({
                "M√©thode": name,
                "Approximation": approx_fmt,
                "Erreur (%)": error_fmt,
                "Temps (s)": time_fmt
            })
        
        # Affichage des r√©sultats sous forme de tableau
        st.table(results)
        
        # Affichage de la valeur exacte si disponible
        if exact_value is not None:
            exact_fmt = format_number(exact_value, decimales)
            st.write(f"Valeur exacte (calcul symbolique): {exact_fmt}")
        
        # √âtude de convergence
        if exact_value is not None and n_max > n:
            st.subheader("Analyse de Convergence")
            
            fig, ax = plt.subplots(figsize=(10, 6))
            
            for name, method in methods.items():
                if name == "Monte Carlo":
                    continue  # On traite Monte Carlo s√©par√©ment car al√©atoire
                
                n_vals, errs = study_convergence(method, f_lambda, a, b, n_max, exact_value)
                ax.loglog(n_vals, errs, 'o-', label=name)
            
            ax.set_xlabel('Nombre de points (n)')
            ax.set_ylabel('Erreur relative (%)')
            ax.set_title('Convergence des M√©thodes Num√©riques')
            ax.legend()
            ax.grid(True, which="both", ls="--")
            st.pyplot(fig)
            
            # Convergence Monte Carlo (moyenne sur plusieurs essais)
            st.write("Convergence de la m√©thode Monte Carlo (moyenne sur 10 essais):")
            n_vals_mc = np.logspace(1, np.log10(n_max), 10).astype(int)
            avg_errs_mc = []
            
            for n in n_vals_mc:
                errs = []
                for _ in range(10):
                    approx = monte_carlo(f_lambda, a, b, n)
                    err = compute_error(approx, exact_value)
                    errs.append(err)
                avg_errs_mc.append(np.mean(errs))
            
            fig_mc, ax_mc = plt.subplots(figsize=(10, 6))
            ax_mc.loglog(n_vals_mc, avg_errs_mc, 'o-', label="Monte Carlo")
            ax_mc.set_xlabel('Nombre de points (n)')
            ax_mc.set_ylabel('Erreur relative moyenne (%)')
            ax_mc.set_title('Convergence de la M√©thode Monte Carlo')
            ax_mc.legend()
            ax_mc.grid(True, which="both", ls="--")
            st.pyplot(fig_mc)
        
        # Th√©orie sur les m√©thodes
        st.subheader("Informations sur les M√©thodes")
        st.write("""
        | M√©thode           | Ordre de Convergence | Erreur Th√©orique | Commentaires |
        |-------------------|----------------------|------------------|--------------|
        | Rectangle gauche  | O(h)                 | O((b-a)¬≤/n)      | M√©thode d'ordre 1 |
        | Rectangle droit   | O(h)                 | O((b-a)¬≤/n)      | M√©thode d'ordre 1 |
        | Rectangle milieu  | O(h¬≤)                | O((b-a)¬≥/n¬≤)     | M√©thode d'ordre 2 |
        | Trap√®zes          | O(h¬≤)                | O((b-a)¬≥/n¬≤)     | M√©thode d'ordre 2 |
        | Simpson 1/3       | O(h‚Å¥)                | O((b-a)‚Åµ/n‚Å¥)     | M√©thode d'ordre 4 (n√©cessite n pair) |
        | Simpson 3/8       | O(h‚Å¥)                | O((b-a)‚Åµ/n‚Å¥)     | M√©thode d'ordre 4 (n√©cessite n multiple de 3) |
        | Gauss-Legendre    | O(h¬≤‚Åø)               | Tr√®s rapide      | M√©thode spectrale, exacte pour polyn√¥mes de degr√© ‚â§ 2n-1 |
        | Monte Carlo       | O(1/‚àön)              | Non d√©terministe | Convergence lente mais efficace en haute dimension |
        """)
        
        # Cr√©ation du graphique combin√©
        st.subheader("Visualisation de la Fonction et son Int√©grale")

        fig, ax1 = plt.subplots(figsize=(10, 6))

        # Courbe de la fonction originale (axe y de gauche)
        x_vals = np.linspace(a, b, 500)
        y_vals = f_lambda(x_vals)
        ax1.plot(x_vals, y_vals, 'b-', label=f"f(x) = {fonction}")
        ax1.set_xlabel('x')
        ax1.set_ylabel('f(x)', color='b')
        ax1.tick_params(axis='y', labelcolor='b')
        ax1.grid(True)

        # Calcul num√©rique de la primitive F(x) = ‚à´f(t)dt de a √† x
        F_vals = np.zeros_like(x_vals)
        for i in range(1, len(x_vals)):
            F_vals[i] = np.trapz(y_vals[:i+1], x=x_vals[:i+1])

        # Cr√©ation d'un second axe y pour la primitive
        ax2 = ax1.twinx()
        ax2.plot(x_vals, F_vals, 'r-', label=f"F(x) = ‚à´f(t)dt de {a_input} √† x")
        ax2.set_ylabel('F(x)', color='r')
        ax2.tick_params(axis='y', labelcolor='r')

        # Ajout des l√©gendes combin√©es
        lines1, labels1 = ax1.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper left')

        # Affichage
        plt.title(f"Fonction et son Int√©grale entre {a_input} et {b_input}")
        st.pyplot(fig)

        # Affichage des valeurs
        st.write(f"Valeur en {b_input}:")
        st.write(f"- f({b_input}) = {y_vals[-1]:.{decimales}f}")
        if exact_value is not None:
            st.write(f"- F({b_input}) = {exact_value:.{decimales}f} (exact)")
        else:
            st.write(f"- F({b_input}) ‚âà {F_vals[-1]:.{decimales}f} (num√©rique)")

# Page Int√©grales Multiples
elif st.session_state.current_page == 'integrales_multiples':
    st.title("Int√©grale Multiple")
    st.subheader("Param√®tres d'Entr√©e")
    # Entr√©e de l'expression
    expr_input = st.text_input("Entrez l'expression √† int√©grer :", "x*y**2")

    # Nombre de variables
    num_vars = st.selectbox("Nombre de variables :", [2, 3, 4], index=0)

    # Symboles possibles
    symbols = sp.symbols("x y z w")
    variables = [symbols[i] for i in range(num_vars)]

    st.subheader("Mode de Calcul")

    # Choix du type de calcul
    calculation_mode = st.radio("Choisier le mode de calcul :", 
                            ["Symbolique sans bornes", 
                                "Calcul avec bornes (exact/num√©rique)"],
                            index=0)

    if calculation_mode == "Symbolique sans bornes":
        # Calcul symbolique simple sans bornes
        try:
            expr = sp.sympify(expr_input)
            start_time = time.time()
            integral = sp.integrate(expr, *variables)
            computation_time = time.time() - start_time
            
            st.markdown("### üìò Forme de l'int√©grale :")
            st.latex(sp.latex(sp.Integral(expr, *variables)))
            
            st.subheader("R√©sultat Symbolique")
            st.latex(sp.latex(integral))
            st.success(f"Primitive : {sp.pretty(integral)}")
            st.info(f"Temps de calcul : {computation_time:.4f} secondes")
            
        except Exception as e:
            st.error(f"Erreur dans le calcul symbolique : {str(e)}")

    else:
        # Mode avec bornes
        integration_info = []
        bounds = []
        has_bounds = True
        
        # D√©finir les variables et les bornes
        for i in range(num_vars):
            var = variables[i]
            col1, col2 = st.columns(2)
            with col1:
                lower = st.text_input(f"Borne inf√©rieure pour {var}", key=f"lower_{var}")
            with col2:
                upper = st.text_input(f"Borne sup√©rieure pour {var}", key=f"upper_{var}")
            
            # V√©rification des bornes
            if not lower or not upper:
                has_bounds = False
                break
            
            try:
                a = sp.sympify(lower)
                b = sp.sympify(upper)
                integration_info.append((var, a, b))
                bounds.append((float(a.evalf()), float(b.evalf())))
            except:
                st.error(f"Erreur dans les bornes de {var}")
                st.stop()
        
        if not has_bounds:
            st.warning("Veuillez sp√©cifier toutes les bornes pour le calcul")
            st.stop()
        
        try:
            f_expr = sp.sympify(expr_input)
            integrale_latex = sp.latex(
                sp.Integral(f_expr, *[(var, a, b) for var, a, b in integration_info])
            )
            st.markdown("### üìò Forme de l'int√©grale :")
            st.latex(integrale_latex)
        except Exception as e:
            st.error(f"Erreur dans l'expression ou les bornes : {e}")
            st.stop()

        # Choix du type de calcul (exact ou num√©rique)
        calculation_type = st.radio("Type de calcul :", ["Exact (symbolique)", "Num√©rique"], index=0)
        
        # Options communes
        simplify = st.checkbox("Simplifier le r√©sultat ?", value=True)

        if calculation_type == "Exact (symbolique)":
            # Calcul symbolique avec bornes
            try:
                expr = sp.sympify(expr_input)
                start_time = time.time()
                integral = sp.integrate(expr, *integration_info)
                computation_time = time.time() - start_time
                
                if simplify:
                    integral = sp.simplify(integral)
                
                st.subheader("R√©sultat Exact")
                st.latex(sp.latex(integral))
                st.success(f"Valeur exacte : {sp.pretty(integral)}")
                st.info(f"Temps de calcul : {computation_time:.4f} secondes")

                
                # Visualisation de la fonction (pour 1D ou 2D)
                st.subheader("Visualisation de la fonction")
                
                if num_vars == 1:
                    try:
                        # Cas 1D
                        x_var = variables[0]
                        a, b = bounds[0]
                        x_vals = np.linspace(float(a), float(b), 500)
                        f_lambda = sp.lambdify(x_var, expr, "numpy")
                        y_vals = f_lambda(x_vals)
                        
                        fig, ax = plt.subplots(figsize=(10, 5))
                        ax.plot(x_vals, y_vals, label=f"f({x_var}) = {expr_input}")
                        ax.fill_between(x_vals, y_vals, alpha=0.3)
                        ax.set_xlabel(str(x_var))
                        ax.set_ylabel(f"f({x_var})")
                        ax.legend()
                        ax.grid()
                        st.pyplot(fig)
                        
                    except:
                        st.warning("Visualisation 1D non disponible pour cette fonction")

                elif num_vars == 2:
                    try:
                        # Cas 2D
                        x_var, y_var = variables[:2]
                        x_bounds, y_bounds = bounds[:2]
                        
                        x_vals = np.linspace(float(x_bounds[0]), float(x_bounds[1]), 100)
                        y_vals = np.linspace(float(y_bounds[0]), float(y_bounds[1]), 100)
                        X, Y = np.meshgrid(x_vals, y_vals)
                        
                        f_lambda = sp.lambdify((x_var, y_var), expr, "numpy")
                        Z = f_lambda(X, Y)
                        
                        fig = plt.figure(figsize=(12, 5))
                        
                        # Surface plot
                        ax1 = fig.add_subplot(121, projection='3d')
                        ax1.plot_surface(X, Y, Z, cmap='viridis')
                        ax1.set_xlabel(str(x_var))
                        ax1.set_ylabel(str(y_var))
                        ax1.set_title(f"f({x_var},{y_var})")
                        
                        # Contour plot
                        ax2 = fig.add_subplot(122)
                        cs = ax2.contourf(X, Y, Z, levels=20, cmap='viridis')
                        plt.colorbar(cs)
                        ax2.set_xlabel(str(x_var))
                        ax2.set_ylabel(str(y_var))
                        ax2.set_title("Valeurs de la fonction")
                        
                        st.pyplot(fig)
                        
                    except:
                        st.warning("Visualisation 2D non disponible pour cette fonction")

                else:
                    st.info("Visualisation disponible seulement pour 1 ou 2 variables")

            except Exception as e:
                st.error(f"Erreur dans le calcul exact : {str(e)}")

        else:
            # Calcul num√©rique
            st.subheader("Options Num√©riques")
            method = st.selectbox("M√©thode num√©rique :", 
                                ["Quadrature adaptative", "Monte Carlo", "Quadrature de Gauss"])
            
            if method == "Quadrature adaptative":
                n_points = st.slider("Pr√©cision (points d'√©valuation)", 100, 10000, 1000)
            elif method == "Monte Carlo":
                n_points = st.slider("Nombre de points al√©atoires", 1000, 1000000, 100000)
            else:
                n_points = st.slider("Ordre de quadrature", 5, 50, 20)

            if st.button("Calculer num√©riquement"):
                try:
                    expr = sp.sympify(expr_input)
                    f = sp.lambdify(variables, expr, "numpy")
                    
                    start_time = time.time()
                    
                    if method == "Quadrature adaptative":
                        result, error = nquad(f, bounds, 
                                            opts={'limit': n_points//(10*num_vars)})
                        
                    elif method == "Monte Carlo":
                        # Impl√©mentation Monte Carlo
                        def monte_carlo(f, bounds, n):
                            dim = len(bounds)
                            points = np.random.uniform(size=(n, dim))
                            for i in range(dim):
                                a, b = bounds[i]
                                points[:,i] = points[:,i]*(b-a) + a
                            volume = np.prod([b-a for a,b in bounds])
                            return volume * np.mean(f(*points.T))
                        
                        result = monte_carlo(f, bounds, n_points)
                        error = np.nan
                        
                    else:  # Quadrature de Gauss
                        from numpy.polynomial.legendre import leggauss
                        
                        def gauss_quad(f, bounds, n):
                            points, weights = [], []
                            for a, b in bounds:
                                xi, wi = leggauss(n)
                                xi = 0.5*(xi + 1)*(b - a) + a
                                wi = 0.5*(b - a)*wi
                                points.append(xi)
                                weights.append(wi)
                            
                            grid = np.meshgrid(*points, indexing='ij')
                            W = np.ones_like(grid[0])
                            for w in weights:
                                W = W * np.resize(w, W.shape)
                            
                            return np.sum(f(*grid) * W)
                        
                        result = gauss_quad(f, bounds, n_points)
                        error = np.nan
                    
                    computation_time = time.time() - start_time
                    
                    # Affichage des r√©sultats
                    st.subheader("R√©sultat Num√©rique")
                    cols = st.columns(3)
                    cols[0].metric("Valeur", f"{result:.8f}")
                    cols[1].metric("Erreur", f"{error:.2e}" if not np.isnan(error) else "N/A")
                    cols[2].metric("Temps", f"{computation_time:.4f}s")
                    
                    st.subheader("Visualisation graphique :")
                    # Visualisation pour 2D
                    if num_vars == 2:
                        try:
                            x = np.linspace(bounds[0][0], bounds[0][1], 100)
                            y = np.linspace(bounds[1][0], bounds[1][1], 100)
                            X, Y = np.meshgrid(x, y)
                            Z = f(X, Y)
                            
                            fig = plt.figure(figsize=(12, 5))
                            ax1 = fig.add_subplot(121, projection='3d')
                            ax1.plot_surface(X, Y, Z, cmap='viridis')
                            ax1.set_title("Fonction √† int√©grer")
                            
                            ax2 = fig.add_subplot(122)
                            cs = ax2.contourf(X, Y, Z, levels=20, cmap='viridis')
                            fig.colorbar(cs)
                            ax2.set_title("Valeurs de la fonction")
                            
                            st.pyplot(fig)
                        except:
                            st.warning("Visualisation 3D non disponible pour cette fonction")

                except Exception as e:
                    st.error(f"Erreur dans le calcul num√©rique : {str(e)}")

# Page Int√©gral impropre
elif st.session_state.current_page == 'int_impropre':
    st.title("M√©thodes de Calcul des Int√©grales Impropres")
    
    st.subheader("Param√®tres d'Entr√©e")
    with st.expander("Param√®tres de Calcul", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            fonction = st.text_input("Fonction f(x) :", "exp(-x**2)")
            a = st.text_input("Borne inf√©rieure a :", "-inf")
            decimales = st.slider("Pr√©cision (d√©cimales) :", 2, 15, 6)
            
        with col2:
            methode = st.selectbox("M√©thode :", ["Quadrature adaptative", "Changement de variable"])
            b = st.text_input("Borne sup√©rieure b :", "inf")
            max_points = st.number_input("Points max d'√©valuation :", 100, 100000, 10000)
    
    # Fonction pour convertir les bornes en valeurs num√©riques
    def parse_bound(bound_str):
        bound_str = bound_str.strip().lower()
        if bound_str in ['inf', 'infty', 'infini', '+inf', '+infty', '+infini']:
            return np.inf
        elif bound_str in ['-inf', '-infty', '-infini']:
            return -np.inf
        else:
            try:
                return float(sp.sympify(bound_str).evalf())
            except:
                raise ValueError(f"Impossible d'interpr√©ter la borne: {bound_str}")

    # Conversion des bornes et de la fonction
    x = sp.symbols('x')
    try:
        f_expr = sp.sympify(fonction)
        f_lambda = sp.lambdify(x, f_expr, modules=['numpy', 'math'])
        
        a_val = parse_bound(a)
        b_val = parse_bound(b)
            
    except Exception as e:
        st.error(f"Erreur dans la saisie : {str(e)}")
        st.stop()

    # Fonctions de calcul
    def compute_adaptive(f, a, b, tol=1e-6):
        return integrate.quad(f, a, b, limit=max_points)

    if st.button("Calculer l'int√©grale"):
        start_time = time.time()
        
        with st.spinner("Calcul en cours..."):
            try:
                result, error = compute_adaptive(f_lambda, a_val, b_val)
                computation_time = time.time() - start_time
                
                # Affichage des r√©sultats
                st.success("Calcul termin√© !")
                cols = st.columns(3)
                cols[0].metric("R√©sultat", f"{result:.{decimales}f}")
                cols[1].metric("Erreur estim√©e", f"{error:.{decimales}f}")
                cols[2].metric("Temps de calcul", f"{computation_time:.4f} sec")
                
                # Visualisation
                st.subheader("Visualisation de la fonction")
                try:
                    # D√©termination des bornes de visualisation
                    if np.isinf(a_val) and np.isinf(b_val):
                        x_min, x_max = -5, 5
                    elif np.isinf(a_val):
                        x_min, x_max = float(b_val)-10, float(b_val)
                    elif np.isinf(b_val):
                        x_min, x_max = float(a_val), float(a_val)+10
                    else:
                        x_min, x_max = float(a_val), float(b_val)
                    
                    x_vals = np.linspace(x_min, x_max, 1000)
                    y_vals = f_lambda(x_vals)
                    
                    fig, ax = plt.subplots(figsize=(10, 5))
                    ax.plot(x_vals, y_vals, label=f"f(x) = {fonction}")
                    
                    # Remplissage seulement si les bornes sont finies
                    if not np.isinf(a_val) and not np.isinf(b_val):
                        ax.fill_between(x_vals, y_vals, alpha=0.2)
                    
                    ax.set_xlabel("x")
                    ax.set_ylabel("f(x)")
                    ax.legend()
                    ax.grid()
                    st.pyplot(fig)
                
                except Exception as e:
                    st.warning(f"Visualisation limit√©e : {str(e)}")

            except Exception as e:
                st.error(f"Erreur dans le calcul : {str(e)}")

# Page Monte Carlo
elif st.session_state.current_page == 'monte_carlo':
    st.title("Int√©gration de Monte Carlo - Multidimensionnelle")

    st.header("Param√®tres d'Entr√©e :")
    # Entr√©e de l'expression
    expr_input = st.text_input("Entrez la fonction f(x, y, ...)", "x**2 + y**2")

    # Nombre de variables
    num_vars = st.selectbox("Nombre de variables :", [1, 2, 3, 4], index=1)

    # Symboles possibles
    symbols = sp.symbols("x y z w")[:num_vars]
    bounds_input = []  # Stocker les entr√©es utilisateur
    bounds = []       # Stocker les valeurs num√©riques

    # D√©finir les bornes pour chaque variable
    for i, var in enumerate(symbols):
        col1, col2 = st.columns(2)
        with col1:
            a_input = st.text_input(f"Borne inf√©rieure pour {var}", "-1", key=f"low_{var}_{i}")
        with col2:
            b_input = st.text_input(f"Borne sup√©rieure pour {var}", "1", key=f"up_{var}_{i}")
        bounds_input.append((a_input, b_input))
        try:
            a_sym = sp.sympify(a_input)
            b_sym = sp.sympify(b_input)
            bounds.append((float(a_sym.evalf()), float(b_sym.evalf())))
        except:
            st.error(f"Borne invalide pour {var}")
            st.stop()

    # Affichage de la forme de l'int√©grale
    try:
        f_expr = sp.sympify(expr_input)
        # Cr√©er les bornes symboliques pour l'affichage
        integral_bounds = [(v, sp.sympify(a), sp.sympify(b)) for v, (a, b) in zip(symbols, bounds_input)]
        integral_latex = sp.latex(sp.Integral(f_expr, *[(v, a, b) for v, a, b in integral_bounds]))
        st.markdown("### üßæ Forme de l'int√©grale :")
        st.latex(integral_latex)
    except Exception as e:
        st.error(f"Erreur dans la fonction : {e}")
        st.stop()

    # Nombre d'√©chantillons (avec une cl√© unique)
    N = st.number_input("Nombre de points Monte Carlo", 
                    min_value=1000, 
                    max_value=1_000_000, 
                    value=10000, 
                    step=1000,
                    key="num_points_input")

    # Bouton de calcul (avec une cl√© unique)
    if st.button("Calculer l'int√©grale (Monte Carlo)", key="calculate_button"):
        try:
            f_lambda = sp.lambdify(symbols, f_expr, modules=["numpy"])

            # G√©n√©rer des points al√©atoires dans l'hyperrectangle
            points = np.random.rand(N, num_vars)
            scaled_points = np.zeros_like(points)
            vol = 1.0

            for i in range(num_vars):
                a, b = bounds[i]
                scaled_points[:, i] = a + (b - a) * points[:, i]
                vol *= (b - a)

            f_vals = f_lambda(*[scaled_points[:, i] for i in range(num_vars)])
            f_vals = np.nan_to_num(f_vals)

            mean_val = np.mean(f_vals)
            std_err = np.std(f_vals) / np.sqrt(N)
            estimate = vol * mean_val
            error = vol * std_err

            st.success(f"Valeur estim√©e de l'int√©grale : {estimate:.6f}")
            st.info(f"Erreur standard estim√©e : ¬± {error:.6f}")

            # =============================================
            # VISUALISATIONS
            # =============================================
            
            st.markdown("## üìä Visualisations")

            # 1. Nuage de points pour 2D
            if num_vars == 2 and N <= 10000:
                st.markdown("### Nuage de points 2D")
                fig, ax = plt.subplots()
                x_vals = scaled_points[:, 0]
                y_vals = scaled_points[:, 1]
                
                scatter = ax.scatter(x_vals, y_vals, c=f_vals, cmap='viridis', s=5)
                plt.colorbar(scatter, label='Valeur de f(x,y)')
                
                ax.set_xlabel('x')
                ax.set_ylabel('y')
                ax.set_title('√âchantillons Monte Carlo')
                st.pyplot(fig)

            # 2. Histogramme des valeurs
            st.markdown("### Distribution des valeurs")
            fig2, ax2 = plt.subplots()
            ax2.hist(f_vals, bins=50, density=True, alpha=0.7)
            ax2.axvline(mean_val, color='r', linestyle='dashed', linewidth=1, label=f'Moyenne: {mean_val:.2f}')
            ax2.set_xlabel('Valeurs de f(x)')
            ax2.set_ylabel('Densit√©')
            ax2.set_title('Distribution des valeurs √©chantillonn√©es')
            ax2.legend()
            st.pyplot(fig2)

            # 3. Convergence de la m√©thode Monte Carlo (am√©lior√©e)
            st.markdown("### Convergence de la m√©thode Monte Carlo")
            
            # Calculer la convergence progressive
            sample_sizes = np.logspace(np.log10(100), np.log10(N), 100).astype(int)
            estimates = []
            errors = []
            
            for size in sample_sizes:
                sub_sample = f_vals[:size]
                m = np.mean(sub_sample)
                estimates.append(vol * m)
                errors.append(vol * np.std(sub_sample)/np.sqrt(size))
            
            # Cr√©er la figure
            fig3, (ax3_1, ax3_2) = plt.subplots(2, 1, figsize=(10, 10))
            
            # Graphique sup√©rieur: Estimation et intervalle de confiance
            ax3_1.plot(sample_sizes, estimates, 'b-', label='Estimation')
            ax3_1.fill_between(sample_sizes, 
                            np.array(estimates) - np.array(errors), 
                            np.array(estimates) + np.array(errors),
                            color='b', alpha=0.2, label='Intervalle de confiance')
            ax3_1.axhline(estimate, color='r', linestyle='--', label='Valeur finale')
            ax3_1.set_xscale('log')
            ax3_1.set_xlabel('Nombre d\'√©chantillons (√©chelle log)')
            ax3_1.set_ylabel('Valeur estim√©e')
            ax3_1.set_title('Convergence de l\'estimation')
            ax3_1.legend()
            ax3_1.grid(True)
            
            # Graphique inf√©rieur: Erreur relative
            final_estimate = estimates[-1]
            relative_errors = np.abs((np.array(estimates) - final_estimate)/final_estimate)
            ax3_2.loglog(sample_sizes, relative_errors, 'g-', label='Erreur relative')
            ax3_2.set_xlabel('Nombre d\'√©chantillons (√©chelle log)')
            ax3_2.set_ylabel('Erreur relative')
            ax3_2.set_title('Convergence de l\'erreur relative')
            ax3_2.legend()
            ax3_2.grid(True)
            
            plt.tight_layout()
            st.pyplot(fig3)

            # 4. Visualisation 3D (pour 2 variables)
            if num_vars == 2:
                st.markdown("### Surface 3D de la fonction")
                fig4 = plt.figure(figsize=(10, 7))
                ax4 = fig4.add_subplot(111, projection='3d')
                
                # Cr√©er une grille pour la surface
                x_grid = np.linspace(bounds[0][0], bounds[0][1], 50)
                y_grid = np.linspace(bounds[1][0], bounds[1][1], 50)
                X, Y = np.meshgrid(x_grid, y_grid)
                Z = f_lambda(X, Y)
                
                # Surface de la fonction
                surf = ax4.plot_surface(X, Y, Z, cmap='viridis', alpha=0.7)
                fig4.colorbar(surf, ax=ax4, shrink=0.5, aspect=5)
                
                # Points √©chantillonn√©s (un √©chantillon pour √©viter la surcharge)
                if N <= 10000:
                    ax4.scatter(scaled_points[:, 0], scaled_points[:, 1], f_vals, 
                            c='r', s=1, alpha=0.3, label='Points MC')
                
                ax4.set_xlabel('x')
                ax4.set_ylabel('y')
                ax4.set_zlabel('f(x,y)')
                ax4.set_title('Surface de la fonction avec points √©chantillonn√©s')
                ax4.legend()
                st.pyplot(fig4)

        except Exception as e:
            st.error(f"Erreur dans le calcul Monte Carlo : {e}")

# Page Int√©gration adaptative
elif st.session_state.current_page == 'adapt':
    st.title("Int√©gration Adaptative")
    st.subheader("Param√®tres d'Entr√©e")
    # D√©finition globale de la m√©thode de Simpson
    def simpson(f, a, b):
        c = (a + b) / 2
        h3 = (b - a) / 6
        return h3 * (f(a) + 4*f(c) + f(b))

    # Section param√®tres
    
    with st.expander("Param√®tres de calcul", expanded=True):
        fonction = st.text_input("Fonction f(x)", "sin(x)", 
                                help="Utilisez 'x' comme variable. Ex: x**2, exp(-x), sin(pi*x)")
        col1, col2 = st.columns(2)
        
        with col1:
            
            a = st.number_input("Borne inf√©rieure a", -10.0, 10.0, 0.0, 
                            step=0.1, format="%.2f")
            
        with col2:
            b = st.number_input("Borne sup√©rieure b", -10.0, 10.0, float(np.pi), 
                            step=0.1, format="%.2f")

        st.markdown("---")
        max_depth = st.slider("Profondeur max", 1, 20, 10,
                                help="Nombre maximal de subdivisions r√©cursives")
        tol_options = [1e-12, 1e-11, 1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3]
        tol = st.select_slider(
            "Pr√©cision (tol√©rance)",
            options=tol_options,
            value=1e-6,
            format_func=lambda x: f"{x:.1e}",
            help="Plus la valeur est petite, plus le calcul est pr√©cis mais long"
        )

    # Conversion de la fonction
    try:
        f = lambda x: eval(fonction, {'x': x, 'np': np, 'sin': np.sin, 'cos': np.cos, 
                                    'tan': np.tan, 'exp': np.exp, 'log': np.log,
                                    'sqrt': np.sqrt, 'pi': np.pi})
    except Exception as e:
        st.error(f"Erreur dans la fonction : {e}")
        st.stop()

    # Algorithme d'int√©gration adaptative
    def adaptive_integration(f, a, b, tol, depth=0, max_depth=10):    
        c = (a + b) / 2
        integral_ab = simpson(f, a, b)
        integral_ac = simpson(f, a, c)
        integral_cb = simpson(f, c, b)
        error = abs(integral_ab - (integral_ac + integral_cb))
        
        if error < tol or depth >= max_depth:
            return integral_ac + integral_cb
        else:
            return (adaptive_integration(f, a, c, tol/2, depth+1, max_depth) + 
                    adaptive_integration(f, c, b, tol/2, depth+1, max_depth))

    # Fonction pour tracer les subdivisions
    def plot_adaptive(f, a, b, tol, depth=0, max_depth=10):
        c = (a + b) / 2
        plt.plot([a, a], [0, f(a)], 'r-', alpha=0.3)
        plt.plot([b, b], [0, f(b)], 'r-', alpha=0.3)
        
        if depth < max_depth:
            error = abs(simpson(f, a, b) - (simpson(f, a, c) + simpson(f, c, b)))
            if error > tol:
                plot_adaptive(f, a, c, tol/2, depth+1, max_depth)
                plot_adaptive(f, c, b, tol/2, depth+1, max_depth)

    # Calcul et visualisation
    try:
        # Calcul des r√©sultats
        result_adaptive = adaptive_integration(f, a, b, tol, 0, max_depth)
        result_scipy, _ = integrate.quad(f, a, b, epsabs=tol)
        
        # Pr√©paration du graphique
        fig, ax = plt.subplots(figsize=(10, 6))
        x_vals = np.linspace(a, b, 500)
        y_vals = f(x_vals)
        ax.plot(x_vals, y_vals, 'b-', label=f"f(x) = {fonction}")
        
        # Trac√© des subdivisions
        plot_adaptive(f, a, b, tol, 0, max_depth)
        ax.fill_between(x_vals, y_vals, alpha=0.2)
        ax.set_title(f"Subdivisions adaptatives (tol√©rance = {tol:.1e})")
        ax.legend()
        
        # Affichage
        st.pyplot(fig)
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("M√©thode adaptative", f"{result_adaptive:.8f}")
        with col2:
            st.metric("Scipy (r√©f√©rence)", f"{result_scipy:.8f}")
        
    except Exception as e:
        st.error(f"Erreur de calcul : {e}")

# Page Guide
elif st.session_state.current_page == 'exemples':
    st.title("üìò Guide d'Utilisation")

    st.markdown("""
    Cette application permet de **calculer des int√©grales** en utilisant diff√©rentes m√©thodes num√©riques 
    et affiche des **visualisations interactives** de la fonction et de son int√©grale.
    """)

    with st.expander("üìå 1. Param√®tres d'Entr√©e", expanded=True):
        st.subheader("Fonction √† int√©grer (f(x))")
        st.markdown("""
        - **Syntaxe** : Utilisez `x` comme variable et des expressions math√©matiques valides.
        - **Exemples** :
            - `sin(x)` ‚Üí $\sin(x)$
            - `cos(x)` ‚Üí $\cos(x)$
            - `tan(x)` ‚Üí $\\tan(x)$
            - `arcsin(x)` ‚Üí $\\arcsin(x)$
            - `arcscos(x)` ‚Üí $\\arccos(x)$
            - `arctan(x)` ‚Üí $\\arctan(x)$
            - `exp(x)` ‚Üí $e^x$
            - `x**2` ou `x^2` ‚Üí $x^2$
            - `x**n` ou `x^n` ‚Üí $x^n$ 
            - `x**2 + 3*x - 5` ‚Üí $x^2 + 3x - 5$
            - `1/x` ‚Üí $\\frac{1}{x}$
            - `1/(1+x**2)` ‚Üí $\\frac{1}{1+x^2}$
            - `x^2-1/(1+x**2)` ‚Üí $\\frac{x^2-1}{1+x^2}$
            - `log(x)` ‚Üí $\ln(x)$ (logarithme naturel)
            - `sqrt(x)` ‚Üí $\sqrt{x}$
            - `pi * cos(x)` ‚Üí $\pi \cos(x)$
            - `abs(x)` ‚Üí $|x|$
            - `alpha` ‚Üí $\\alpha$
            - `beta` ‚Üí $\\beta$
            - `gamma` ‚Üí $\\gamma$
            - `delta` ‚Üí $\\delta$
            - `epsilon` ‚Üí $\\epsilon$
            - `zeta` ‚Üí $\\zeta$
            - `eta` ‚Üí $\\eta$
            - `theta` ‚Üí $\\theta$
            - `iota` ‚Üí $\\iota$
            - `kappa` ‚Üí $\\kappa$
            - `lambda` ‚Üí $\\lambda$
            - `mu` ‚Üí $\\mu$
            - `nu` ‚Üí $\\nu$
            - `xi` ‚Üí $\\xi$
            - `pi` ‚Üí $\\pi$
            - `rho` ‚Üí $\\rho$
            - `sigma` ‚Üí $\\sigma$
            - `tau` ‚Üí $\\tau$
            - `phi` ‚Üí $\\phi$
            - `chi` ‚Üí $\\chi$
            - `psi` ‚Üí $\\psi$
            - `omega` ‚Üí $\\omega$
            - `Gamma` ‚Üí $\\Gamma$
            - `Delta` ‚Üí $\\Delta$
            - `Theta` ‚Üí $\\Theta$
            - `Lambda` ‚Üí $\\Lambda$
            - `Xi` ‚Üí $\\Xi$
            - `Pi` ‚Üí $\\Pi$
            - `Sigma` ‚Üí $\\Sigma$
            - `Phi` ‚Üí $\\Phi$
            - `Psi` ‚Üí $\\Psi$
            - `Omega` ‚Üí $\\Omega$
        """)

        st.subheader("Bornes d'int√©gration (a et b)")
        st.markdown("""
        - **Syntaxe** : Nombres ou expressions math√©matiques.
        - **Exemples** :
            - `0` ‚Üí $0$
            - `pi` ‚Üí $\pi$
            - `pi/2` ‚Üí $\\frac{\pi}{2}$
            - `+inf` ‚Üí $+\infty$
            - `-inf` ‚Üí $-\infty$
            - `1.5` ‚Üí $1.5$
            - `sqrt(2)` ‚Üí $\sqrt{2}$
        """)

        st.subheader("Nombre de points (n)")
        st.markdown("""
        - **D√©finition** : Nombre de subdivisions pour les m√©thodes num√©riques.
        - **Recommand√©** : Entre 100 et 1000 pour un bon √©quilibre pr√©cision/temps.
        """)

        st.subheader("Valeur exacte (optionnelle)")
        st.markdown("""
        - **Utilit√©** : Permet de comparer avec les m√©thodes num√©riques.
        - **Exemple** : Si vous int√©grez `sin(x)` entre `0` et `pi`, la valeur exacte est `2`.
        """)

    with st.expander("üìä 2. M√©thodes d'Int√©gration Disponibles", expanded=False):
        st.markdown("""
        | M√©thode          | Pr√©cision (Ordre) | Utilisation Recommand√©e |
        |------------------|------------------|------------------------|
        | **Rectangle gauche** | $O(h)$ | Simple mais peu pr√©cis |
        | **Rectangle droit** | $O(h)$ | Similaire √† gauche |
        | **Rectangle milieu** | $O(h^2)$ | Plus pr√©cis que gauche/droit |
        | **Trap√®zes** | $O(h^2)$ | Bon compromis vitesse/pr√©cision |
        | **Simpson 1/3** | $O(h^4)$ | Tr√®s pr√©cis pour fonctions lisses |
        | **Simpson 3/8** | $O(h^4)$ | Alternative √† Simpson 1/3 |
        | **Gauss-Legendre** | $O(h^{2n})$ | Extr√™mement pr√©cis pour petits `n` |
        | **Monte Carlo** | $O(1/\sqrt{n})$ | Utile en haute dimension |
        """)

    with st.expander("üìà 3. Visualisations Disponibles", expanded=False):
        st.markdown("""
        1. **Graphique de la fonction**  
        - Affiche $f(x)$ entre $a$ et $b$.
        - Exemple :  
            ```python
            f(x) = sin(x) ‚Üí affiche la courbe sinuso√Ødale.
            ```

        2. **Aire sous la courbe** *(Int√©grale)*  
        - Montre la zone calcul√©e par l'int√©grale.
        - **Vert** : Partie positive ($f(x) \geq 0$).
        - **Rouge** : Partie n√©gative ($f(x) < 0$).

        3. **Convergence des m√©thodes**  
        - Compare l'erreur relative en fonction du nombre de points $n$.

        4. **Primitive $F(x) = \int_a^x f(t) \, dt$** *(Optionnel)*  
        - Affiche la fonction int√©grale dans le m√™me rep√®re que $f(x)$.
        """)

    with st.expander("‚öôÔ∏è 4. Param√®tres Avanc√©s", expanded=False):
        st.markdown("""
        | Option | Description |
        |--------|-------------|
        | **Nombre de d√©cimales** | Pr√©cision d'affichage des r√©sultats (2 √† 20 chiffres). |
        | **Nombre max de points** | Limite pour l'√©tude de convergence (10 √† 5000). |
        """)

    with st.expander("üöÄ 5. Exemples d'Utilisation", expanded=False):
        st.markdown("""
        1. **Int√©grale de $\sin(x)$ entre $0$ et $\pi$**
        - Fonction : `sin(x)`
        - Bornes : `a = 0`, `b = pi`
        - Valeur exacte : `2`

        2. **Int√©grale de $e^{-x^2}$ entre $0$ et $1$**
        - Fonction : `exp(-x**2)`
        - Bornes : `a = 0`, `b = 1`
        - Valeur exacte : (non fournie ‚Üí calcul num√©rique)

        3. **Int√©grale de $\frac{1}{1+x^2}$ entre $-1$ et $1$**
        - Fonction : `1/(1+x**2)`
        - Bornes : `a = -1`, `b = 1`
        - Valeur exacte : `pi/2`
        """)

    with st.expander("‚ùì 6. FAQ", expanded=False):
        st.markdown("""
        ### **Q1. Pourquoi certaines m√©thodes donnent-elles des erreurs ?**
        - Les m√©thodes d'ordre bas (Rectangle) sont moins pr√©cises pour des fonctions complexes.
        - **Solution** : Utilisez **Simpson** ou **Gauss-Legendre** pour plus de pr√©cision.

        ### **Q2. Comment am√©liorer la pr√©cision ?**
        - Augmentez le nombre de points (`n`).
        - Utilisez des m√©thodes d'ordre √©lev√© (**Simpson 3/8**, **Gauss-Legendre**).

        ### **Q3. Pourquoi Monte Carlo est-il lent ?**
        - M√©thode al√©atoire ‚Üí n√©cessite beaucoup de points pour converger.
        - **Utile en haute dimension** (pas ici, car 1D).
        """)

    with st.expander("üìå 7. Notes Techniques", expanded=False):
        st.markdown("""
        - **Calcul symbolique** : Si possible, l'app calcule la valeur exacte avec SymPy.
        - **Calcul num√©rique** : Si le calcul symbolique √©choue, utilise des m√©thodes num√©riques.
        - **Performances** : Gauss-Legendre est rapide pour petit `n`, Monte Carlo lent.
        """)

    st.success("‚úÖ **Pr√™t √† utiliser l'application !** Entrez votre fonction, ajustez les param√®tres et explorez les r√©sultats.")

# Pied de page
st.sidebar.markdown("---")